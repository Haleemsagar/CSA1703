# Define the CSP class
print("haleemsagar")
class CSP:
    def __init__(self, variables, domains, neighbors, constraints):
        self.variables = variables
        self.domains = domains
        self.neighbors = neighbors
        self.constraints = constraints

    def is_consistent(self, var, value, assignment):
        for neighbor in self.neighbors[var]:
            if neighbor in assignment and not self.constraints(var, value, neighbor, assignment[neighbor]):
                return False
        return True

    def backtrack(self, assignment):
        # Check if assignment is complete
        if len(assignment) == len(self.variables):
            return assignment

        # Select unassigned variable
        unassigned = [v for v in self.variables if v not in assignment]
        var = unassigned[0]

        for value in self.domains[var]:
            if self.is_consistent(var, value, assignment):
                assignment[var] = value

                # Forward checking
                if self.forward_check(var, value, assignment):
                    result = self.backtrack(assignment)
                    if result:
                        return result

                # Undo assignment
                del assignment[var]
        return None

    def forward_check(self, var, value, assignment):
        for neighbor in self.neighbors[var]:
            if neighbor not in assignment:
                if all(not self.constraints(var, value, neighbor, val) for val in self.domains[neighbor]):
                    return False
        return True

# Constraint: adjacent regions must not have the same color
def different_colors(var1, color1, var2, color2):
    return color1 != color2

# Example: Map of Australia
variables = ['WA', 'NT', 'SA', 'Q', 'NSW', 'V', 'T']
domains = {
    var: ['Red', 'Green', 'Blue'] for var in variables
}
neighbors = {
    'WA': ['NT', 'SA'],
    'NT': ['WA', 'SA', 'Q'],
    'SA': ['WA', 'NT', 'Q', 'NSW', 'V'],
    'Q': ['NT', 'SA', 'NSW'],
    'NSW': ['SA', 'Q', 'V'],
    'V': ['SA', 'NSW'],
    'T': []  # Tasmania has no land neighbors
}

# Create the CSP instance
australia_csp = CSP(variables, domains, neighbors, different_colors)

# Solve the CSP
solution = australia_csp.backtrack({})

# Print the solution
if solution:
    print("Solution found:")
    for region in sorted(solution):
        print(f"{region}: {solution[region]}")
else:
    print("No solution found.")
